#!/usr/bin/env python3

# Extracts a zip archive while converting file names from Shift-JIS encoding to UTF-8.

import zipfile
import sys
import os
import codecs
import argparse

argument_parser = argparse.ArgumentParser(prog='unzip_jp',
                                          description='Unzips archives containing Shift-JIS-encoded characters')

argument_parser.add_argument('archive',
                             type=argparse.FileType('rb'),
                             help="The archive to extract.")

argument_parser.add_argument('-x','--extraction-location',
                             action='store',
                             default=os.getcwd(),
                             help="Location to place the extracted files. If not given, the current directory will be used.")

argument_parser.add_argument('-p', '--password',
                             action='store',
                             help="The password (if any) for the zip archive.")

args = argument_parser.parse_args()

directory = os.path.splitext(os.path.basename(args.archive.name))[0]

if not os.path.exists(os.path.join(args.extraction_location, directory)):
    os.makedirs(os.path.join(args.extraction_location, directory))
    directory = os.path.join(args.extraction_location, directory)

with zipfile.ZipFile(args.archive, 'r') as z:
    if args.password:
        z.setpassword(password.encode('cp850','replace'))

    for f in z.infolist():
        bad_filename = f.filename
        if bytes != str:
            # Python 3 - decode filename into bytes
            # assume CP437 - these zip files were from Windows anyway
            bad_filename = bytes(bad_filename, 'cp437')
        try:
            uf = codecs.decode(bad_filename, 'sjis')
        except:
            uf = codecs.decode(bad_filename, 'shift_jisx0213')
        # need to print repr in Python 2 as we may encounter UnicodeEncodeError
        # when printing to a Windows console
        print(repr(uf))
        filename=os.path.join(directory, uf)

        # create directories if necessary
        if not os.path.exists(os.path.dirname(filename)):
            try:
                os.makedirs(os.path.dirname(filename))
            except OSError as exc: # Guard against race condition
                if exc.errno != errno.EEXIST:
                    raise
        # don't try to write to directories
        if not filename.endswith('/'):
            with open(filename, 'wb') as dest:
                dest.write(z.read(f))
